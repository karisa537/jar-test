# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - none
  # paths:
  #   exclude:
  #   - pipelines/*
  #   - test/*
  #   - README.md
  #   - .dockerignore
  #   - .gitignore
 
pool:
  vmImage: "ubuntu-latest"

variables:
  - name: registryName
    value: 'kidaba'
  - name: imageName
    value: 'app-example-vulnerabilities'
  - name: azureSubscription
    value: 'azureRM'
  - name: tag
    value: '$(Build.BuildId)'
  - name: waitForScanResultsAfterPushInMinutes
    value: '5'

stages:
- stage: Build_and_Publish
  displayName: Build and push image to registry than check for vulnerability scan results to determine publishing health
  jobs:
  - job: MavenBuild
    displayName: MavenBuild
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'package'

    - task: CopyFiles@2
      displayName: Copy Files
      inputs:
        SourceFolder: $(system.defaultworkingdirectory)/target
        Contents: '/*.jar'
        TargetFolder: $(build.artifactstagingdirectory)

    - task: PublishBuildArtifacts@1
      displayName: publishing artifact
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: jar artifacts
        publishLocation: 'Container'
      condition: succeededOrFailed()
    - task: PublishPipelineArtifact@1
      displayName: Publish Pipeline Artifact
      inputs:
        artifact: cicdartifact

  # - job: BuildAndPush
  #   displayName: BuildAndPush
  #   pool:
  #     vmImage: 'ubuntu-latest'
  #   steps:
  #     - task: AzureCLI@2
  #       displayName: AZ ACR Login
  #       inputs:
  #         azureSubscription: $(azureSubscription)
  #         scriptType: 'bash'
  #         scriptLocation: 'inlineScript'
  #         inlineScript: 'az acr login --name $(registryName)'
  #     - task: AzureCLI@2
  #       displayName: AZ ACR Build
  #       inputs:
  #         azureSubscription: $(azureSubscription)
  #         scriptType: 'bash'
  #         scriptLocation: 'inlineScript'
  #         inlineScript: 'az acr build -t $(imageName):$(tag) -t $(imageName):latest -r $(registryName) -f Dockerfile .'
  #         useGlobalConfig: true
  #         workingDirectory: '$(Build.SourcesDirectory)/target'
          

  # - job: WaitForScanResults
  #   displayName: Wait for scan results
  #   pool: 'Server'
  #   dependsOn: 
  #   - BuildAndPush
  #   steps:
  #   - task: Delay@1
  #     inputs:
  #       delayForMinutes: '$(waitForScanResultsAfterPushInMinutes)'

  # - job: ImageScanCheck
  #   displayName: Check for image vulnerabilities
  #   pool:
  #     vmImage: 'ubuntu-latest'
  #   dependsOn: 
  #   - BuildAndPush
  #   - WaitForScanResults
  #   steps:
  #     - task: AzureCLI@2
  #       inputs:
  #         azureSubscription: $(azureSubscription)
  #         scriptType: 'pscore'
  #         scriptLocation: 'scriptPath'
  #         scriptPath: '$(Build.SourcesDirectory)/acr-image-scan.ps1'
  #         arguments: '-registryName $(registryName) -repository $(imageName) -tag $(tag)'